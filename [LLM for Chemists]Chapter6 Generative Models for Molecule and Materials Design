{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMZ6oYByhHjc8hFvLu3rqXT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Suppose we want to maximize a molecule’s QED score (a proxy for drug-likeness). We’ll do a toy hill-climbing: start from a simple molecule and try random single-character modifications, accepting them if QED improves:"],"metadata":{"id":"Oit8N07b_eTm"}},{"cell_type":"code","source":["!pip install rdkit"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x0urryje_jji","executionInfo":{"status":"ok","timestamp":1757228744968,"user_tz":420,"elapsed":13163,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"bef22722-3229-42c6-97b9-e6847d161f7c"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting rdkit\n","  Downloading rdkit-2025.3.6-cp312-cp312-manylinux_2_28_x86_64.whl.metadata (4.1 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.12/dist-packages (from rdkit) (2.0.2)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.12/dist-packages (from rdkit) (11.3.0)\n","Downloading rdkit-2025.3.6-cp312-cp312-manylinux_2_28_x86_64.whl (36.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m36.1/36.1 MB\u001b[0m \u001b[31m51.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: rdkit\n","Successfully installed rdkit-2025.3.6\n"]}]},{"cell_type":"code","source":["import random\n","from rdkit import Chem\n","from rdkit.Chem import QED\n","\n","# Start from ethane\n","best_smiles = \"CC\"\n","best_score = QED.qed(Chem.MolFromSmiles(best_smiles))\n","\n","# Run 5 mutation steps\n","for step in range(5):\n","    # Propose a mutation: randomly add one atom (C, N, or O) to the SMILES string\n","    new_smiles = best_smiles + random.choice([\"C\", \"N\", \"O\"])\n","    mol = Chem.MolFromSmiles(new_smiles)\n","\n","    if mol:  # only consider valid molecules\n","        score = QED.qed(mol)\n","        if score > best_score:\n","            best_smiles, best_score = new_smiles, score\n","\n","    print(f\"Step {step}: new best = {best_smiles} (QED = {best_score:.2f})\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qjb7gqT6_enM","executionInfo":{"status":"ok","timestamp":1757228760309,"user_tz":420,"elapsed":147,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"bde1e5cf-4f01-4c8e-9b4c-cc76427c611c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Step 0: new best = CCN (QED = 0.41)\n","Step 1: new best = CCN (QED = 0.41)\n","Step 2: new best = CCNO (QED = 0.42)\n","Step 3: new best = CCNO (QED = 0.42)\n","Step 4: new best = CCNON (QED = 0.43)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"tpwVn6ZE_gh4"},"execution_count":null,"outputs":[]}]}