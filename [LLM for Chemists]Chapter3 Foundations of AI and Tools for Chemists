{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPbsiwuY5LTN6Vby9C+CRfr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":[" #### **Chapter 3 Foundations of AI and Tools for Chemists**\n","\n","Test your Python Environment"],"metadata":{"id":"Nqx1_fqDtnAU"}},{"cell_type":"code","source":["import numpy as np\n","print(\"Numpy version:\", np.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j42v_uvatphF","executionInfo":{"status":"ok","timestamp":1757224315803,"user_tz":420,"elapsed":7,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"5917a29c-5548-4a58-85ad-3a558da8dceb"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Numpy version: 2.0.2\n"]}]},{"cell_type":"markdown","source":["Use Python Dictionary to store atomic weights of elemnts and perform summation"],"metadata":{"id":"JYFxs6dFu5P5"}},{"cell_type":"code","source":["atom = {\"H\": 1.008, \"C\": 12.01, \"O\": 16.00}\n","mw = 2*atom[\"C\"] + 6*atom[\"H\"] + 1*atom[\"O\"]\n","print(\"Molecular weight of C2H6O:\", mw)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cAVtAut1uxkK","executionInfo":{"status":"ok","timestamp":1757224327831,"user_tz":420,"elapsed":8,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"a84e60d3-ac01-4343-b339-06e92d507b85"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Molecular weight of C2H6O: 46.068\n"]}]},{"cell_type":"code","source":["!pip install rdkit\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vWHbdyLtu0gX","executionInfo":{"status":"ok","timestamp":1757224514541,"user_tz":420,"elapsed":9240,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"2fa5568a-75d9-43d9-b91e-09d9bbba3c8d"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting rdkit\n","  Downloading rdkit-2025.3.6-cp312-cp312-manylinux_2_28_x86_64.whl.metadata (4.1 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.12/dist-packages (from rdkit) (2.0.2)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.12/dist-packages (from rdkit) (11.3.0)\n","Downloading rdkit-2025.3.6-cp312-cp312-manylinux_2_28_x86_64.whl (36.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m36.1/36.1 MB\u001b[0m \u001b[31m52.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: rdkit\n","Successfully installed rdkit-2025.3.6\n"]}]},{"cell_type":"code","source":["from rdkit  import Chem\n","mol = Chem.MolFromSmiles('CCO') # a simple molecule, ethanol print(mol)\n","print(mol)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8LXothXdvEKf","executionInfo":{"status":"ok","timestamp":1757224533678,"user_tz":420,"elapsed":252,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"e594cf63-791d-40b7-ecd3-afc5819617c6"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["<rdkit.Chem.rdchem.Mol object at 0x7d39a2af2ab0>\n"]}]},{"cell_type":"code","source":["print(Chem.MolToSmiles(mol))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hIn1bhDDvlPY","executionInfo":{"status":"ok","timestamp":1757224543900,"user_tz":420,"elapsed":4,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"2bd60887-c991-42f7-9b54-492e6d78902f"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["CCO\n"]}]},{"cell_type":"markdown","source":["You can use read the Mol file as SMILE string or MOL file\n"],"metadata":{"id":"FY6sZizIwRGz"}},{"cell_type":"code","source":["from rdkit import Chem\n","mol = Chem.MolFromSmiles(\"CCO\")"],"metadata":{"id":"wIVxd176vqYg","executionInfo":{"status":"ok","timestamp":1757224551626,"user_tz":420,"elapsed":4,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["mol2 = Chem.MolFromMolFile(\"molecule.mol\")"],"metadata":{"id":"n2l0HPEdwcT3","executionInfo":{"status":"ok","timestamp":1757224754271,"user_tz":420,"elapsed":8,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["print(mol2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YHo_uFuwvr1G","executionInfo":{"status":"ok","timestamp":1757224756099,"user_tz":420,"elapsed":6,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"7863e919-6188-4f12-b957-307252b53125"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["<rdkit.Chem.rdchem.Mol object at 0x7d39a13a0ac0>\n"]}]},{"cell_type":"code","source":["for atom in mol.GetAtoms(): print(atom.GetSymbol(), atom.GetAtomicNum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c0YkHi2PvtsL","executionInfo":{"status":"ok","timestamp":1757224634941,"user_tz":420,"elapsed":4,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"74d68f2b-1f4f-4fc4-a640-a978691587a6"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["C 6\n","C 6\n","O 8\n"]}]},{"cell_type":"markdown","source":["Example using GetNumAtoms function"],"metadata":{"id":"I23Dsf4xwh3o"}},{"cell_type":"code","source":["methane = Chem.MolFromSmiles(\"C\")\n","num_atoms = methane.GetNumAtoms()\n","print(\"Number of atoms in methane:\", num_atoms)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1DjQI3SswtWP","executionInfo":{"status":"ok","timestamp":1757224830494,"user_tz":420,"elapsed":4,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"6d2ce877-d69c-461a-e790-8eb94cb1508c"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of atoms in methane: 1\n"]}]},{"cell_type":"markdown","source":["RDKit by default is considering only heavy atoms (non-hydrogen atoms) when a molecule is created from SMILES. In the SMILES “ C ” for methane, the hydrogen atoms are implicit. RDKit knows they are there conceptually (carbon has valence 4 so implicitly 4 hydrogens), but it doesn’t explicitly list them in the graph unless asked. This is a design choice: chemists often don’t want to deal with all the hydrogens unless necessary, for simplicity and performance. If you want to include hydrogens explicitly, you can add them:"],"metadata":{"id":"dcU8gtScw0I4"}},{"cell_type":"code","source":["methane_with_H = Chem.AddHs(methane)\n","print(\"Number of atoms in methane with H:\", methane_with_H.GetNumAtoms())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pF9TrEhVw4GT","executionInfo":{"status":"ok","timestamp":1757224871798,"user_tz":420,"elapsed":9,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"f32d0cbe-a3fd-4911-8a68-f8ee7f941695"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of atoms in methane with H: 5\n"]}]},{"cell_type":"markdown","source":["To illustrate access atomic information, we use example \"CCO\""],"metadata":{"id":"19UHO2Wnw-oy"}},{"cell_type":"code","source":["ethanol = Chem.MolFromSmiles(\"CCO\")\n","for atom in ethanol.GetAtoms():\n","  print(atom.GetSymbol(), atom.GetMass())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JpOI507rw6b2","executionInfo":{"status":"ok","timestamp":1757224941268,"user_tz":420,"elapsed":5,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"2e6d8b9c-56ca-4b06-94df-be9905c8eb96"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["C 12.011\n","C 12.011\n","O 15.999\n"]}]},{"cell_type":"markdown","source":["Now, let’s consider molecular properties and descriptors. RDKit can compute many common properties or descriptors. Some are accessible as methods (e.g., Mol.GetNumHeavyAtoms() or Mol.GetMolWt() for molecular weight) and others via the Descriptors module. For example:"],"metadata":{"id":"6f_aguTVxNNI"}},{"cell_type":"code","source":["from rdkit.Chem import Descriptors\n","mw = Descriptors.MolWt(ethanol) # molecular weight\n","logp = Descriptors.MolLogP(ethanol) # Wildman-Crippen LogP\n","hbd = Descriptors.NumHDonors(ethanol) # number of H-bond donors\n","print(mw, logp, hbd)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6EcHTJxHxLZa","executionInfo":{"status":"ok","timestamp":1757224984757,"user_tz":420,"elapsed":44,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"c2bfeb09-3981-4e20-b177-d428751eedaf"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["46.069 -0.0014000000000000123 1\n"]}]},{"cell_type":"markdown","source":["You can easily get output from RDKit molecules in various formats. For example:\n","\n","· Get a SMILES string: Chem.MolToSmiles(mol) returns a SMILES.\n","\n","· Get an InChI: if RDKit was built with the InChI library, Chem.MolToInchi(mol) gives an InChI string.\n","\n","· Write to file: Chem.MolToMolFile(mol, \"out.mol\") will save a MOL file. If you have multiple mols, you can use SDWriter to create an SDF."],"metadata":{"id":"h1dB3vXFxZgW"}},{"cell_type":"code","source":["from rdkit import Chem\n","from rdkit.Chem import Descriptors\n","# Create a molecule from SMILES\n","mol = Chem.MolFromSmiles(\"c1ccccc1O\") # phenol (benzene ring with an -OH)\n","if mol:\n","  # Basic info\n","  print(\"Molecule has\", mol.GetNumAtoms(), \"heavy atoms and\", mol.GetNumBonds(), \"bonds.\")\n","  # Compute some descriptors\n","  mol_wt = Descriptors.MolWt(mol)\n","  num_aromatic_atoms = sum(1 for atom in mol.GetAtoms() if atom.GetIsAromatic())\n","  print(f\"Mol. weight = {mol_wt:.2f}, Aromatic atoms = {num_aromatic_atoms}\")\n","  # Generate a SMILES and InChI\n","  print(\"Canonical SMILES:\", Chem.MolToSmiles(mol))\n","  try:\n","    inchi = Chem.MolToInchi(mol)\n","    print(\"InChI:\", inchi)\n","  except:\n","    print(\"InChI generation not available in this RDKit build.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M-0sDf20xTYj","executionInfo":{"status":"ok","timestamp":1757225087462,"user_tz":420,"elapsed":12,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"a276c316-eacf-4cd3-f8ff-c80885bd079a"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Molecule has 7 heavy atoms and 7 bonds.\n","Mol. weight = 94.11, Aromatic atoms = 6\n","Canonical SMILES: Oc1ccccc1\n","InChI: InChI=1S/C6H6O/c7-6-4-2-1-3-5-6/h1-5,7H\n"]}]},{"cell_type":"markdown","source":["## 3.3 Hands-on Example\n","Example: Remove a sodium counter-ion from sodium acetate (which in SMILES might be CC(=O)[O-].[Na+] :"],"metadata":{"id":"uyNVjoc5xxdM"}},{"cell_type":"code","source":["from rdkit import Chem\n","\n","# Create sodium acetate molecule (acetic acid deprotonated plus Na+)\n","mol = Chem.MolFromSmiles(\"CC(=O)[O-].[Na+]\")\n","\n","# Split into separate fragments\n","frags = Chem.GetMolFrags(mol, asMols=True)\n","\n","# Identify the largest fragment by number of atoms\n","main_mol = max(frags, key=lambda m: m.GetNumAtoms())\n","\n","# Print result\n","print(\"Main fragment SMILES:\", Chem.MolToSmiles(main_mol))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OgrgVWvXyF3n","executionInfo":{"status":"ok","timestamp":1757225182389,"user_tz":420,"elapsed":3,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"387c4782-7a6c-44b6-c9c0-24804d2a3ed6"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Main fragment SMILES: CC(=O)[O-]\n"]}]},{"cell_type":"markdown","source":["Some molecules can exist in multiple tautomeric forms (like keto vs enol forms). If not standardized, you might have duplicate entries in different forms. RDKit’s MolStandardize can enumerate tautomers and pick a canonical one. For example:"],"metadata":{"id":"K29Wb8vHyLyO"}},{"cell_type":"code","source":["from rdkit import Chem\n","from rdkit.Chem.MolStandardize import rdMolStandardize\n","\n","# Example molecule (enol form of an amide, possible tautomer)\n","mol = Chem.MolFromSmiles(\"C/C(=N\\\\O)/C\")\n","\n","# Create a tautomer enumerator and canonicalize\n","tautomer_enumerator = rdMolStandardize.TautomerEnumerator()\n","canonical = tautomer_enumerator.Canonicalize(mol)\n","\n","# Print result\n","print(\"Canonical tautomer SMILES:\", Chem.MolToSmiles(canonical))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y4_0-rtgyGQ3","executionInfo":{"status":"ok","timestamp":1757225216719,"user_tz":420,"elapsed":49,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"f53b065d-c158-4629-ae01-2aa38672ab2c"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Canonical tautomer SMILES: CC(C)=NO\n"]}]},{"cell_type":"markdown","source":["By default, RDKit represents molecules in a \"non-explicit hydrogen\" form (except where necessary). That means when you read a SMILES like CCO, RDKit knows there are hydrogens, but they’re implicit (each carbon in ethanol has implicit H count of 3 or 2, etc.). If you need to enumerate all atoms including hydrogens (say for certain 3D operations or explicit valence counting), you can add them:"],"metadata":{"id":"w2mLExrLyTru"}},{"cell_type":"code","source":["from rdkit import Chem\n","\n","# Create ethanol molecule\n","mol = Chem.MolFromSmiles(\"CCO\")\n","\n","# Add explicit hydrogens\n","mol_with_h = Chem.AddHs(mol)\n","\n","# Compare atom counts\n","print(\"Atom count before adding H:\", mol.GetNumAtoms(),\n","      \"; after:\", mol_with_h.GetNumAtoms())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7LCFooNmyOoi","executionInfo":{"status":"ok","timestamp":1757225248445,"user_tz":420,"elapsed":39,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"5d925f55-77c1-44a5-dadf-ce76c7c9e99d"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Atom count before adding H: 3 ; after: 9\n"]}]},{"cell_type":"code","source":["from rdkit import Chem\n","from rdkit.Chem import Descriptors\n","\n","# Example molecules: sodium acetate, benzoic acid, and an amine salt\n","smiles_list = [\"CC(=O)[O-].[Na+]\", \"c1ccc(cc1)C(=O)O\", \"CN(C)C.Cl\"]\n","\n","cleaned_mols = []\n","\n","for smi in smiles_list:\n","    mol = Chem.MolFromSmiles(smi)\n","\n","    # Remove salts by taking the largest fragment\n","    frags = Chem.GetMolFrags(mol, asMols=True)\n","    main = max(frags, key=lambda m: m.GetNumAtoms())\n","\n","    # Compute molecular weight\n","    mw = Descriptors.MolWt(main)\n","\n","    # Keep only molecules under 300 Da\n","    if mw < 300:\n","        cleaned_mols.append(Chem.MolToSmiles(main))\n","        print(f\"Kept {Chem.MolToSmiles(main)} with MW {mw:.1f}\")\n","    else:\n","        print(f\"Removed {Chem.MolToSmiles(main)} with MW {mw:.1f} (too heavy)\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LQ7pwjgCyWYP","executionInfo":{"status":"ok","timestamp":1757225374874,"user_tz":420,"elapsed":44,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"7c11bc41-47da-4182-9dae-794f70c15377"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Kept CC(=O)[O-] with MW 59.0\n","Kept O=C(O)c1ccccc1 with MW 122.1\n","Kept CN(C)C with MW 59.1\n"]}]},{"cell_type":"markdown","source":["## 3.3.2 Reaction Handling and Enumeration\n","For instance, consider a simple amide formation: an acid chloride and an amine react to form an amide (and HCl as a byproduct, which we might ignore or consider separately). We can write a reaction SMARTS like: C(=O)Cl.N>>C(=O)N, but we need to be careful to map the atoms. Let’s do: [C:1](=[O:2])Cl.[N:3]>>[C:1](=[O:2])[N:3]. Here, [C:1] is the carbon of the acid chloride, [O:2] the carbonyl oxygen, and Cl is the leaving group. [N:3] is the amine’s nitrogen. The product shows those mapped atoms forming a bond (carbonyl carbon now bonded to that nitrogen). This\n","\n","SMARTS doesn’t explicitly account for the HCl leaving group (we are essentially ignoring it in the products by not writing it, so it will be a byproduct not captured). For our purposes of enumeration, that’s fine. Using RDKit:"],"metadata":{"id":"1ZB774F7y5gK"}},{"cell_type":"code","source":["from rdkit import Chem\n","from rdkit.Chem import AllChem\n","\n","# Define an amide formation reaction: acid chloride + amine → amide\n","rxn = AllChem.ReactionFromSmarts('[C:1](=[O:2])Cl.[N:3]>>[C:1](=[O:2])[N:3]')\n","\n","# Example reactants\n","reactant1 = Chem.MolFromSmiles(\"CC(=O)Cl\")   # acetyl chloride\n","reactant2 = Chem.MolFromSmiles(\"NCC\")        # ethylamine\n","\n","# Run the reaction\n","products = rxn.RunReactants((reactant1, reactant2))\n","\n","# Print product SMILES\n","for i, prod_set in enumerate(products):\n","    prod = prod_set[0]  # each result is a tuple of products (we have one main product here)\n","    print(f\"Product {i+1}: {Chem.MolToSmiles(prod)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-pUGhH0my1Pr","executionInfo":{"status":"ok","timestamp":1757225440177,"user_tz":420,"elapsed":72,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"3080e1df-cf02-444a-d6f2-f31ad9fecba0"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Product 1: CCNC(C)=O\n"]}]},{"cell_type":"markdown","source":["The real power is when you have sets of reactants. Suppose you have a list of acid chlorides and a list of amines, and you want to enumerate all possible amides you could get by combining each acid chloride with each amine. You can do nested loops and call rxn.RunReactants for each combination. RDKit will return all possible products for each combination (for a deterministic reaction like this, it's usually just one main product, but some reactions could produce multiple products or stereoisomers etc.). For example:"],"metadata":{"id":"68deEk8rzH23"}},{"cell_type":"code","source":["from rdkit import Chem\n","from rdkit.Chem import AllChem\n","\n","# Define amide formation reaction: acid chloride + amine → amide\n","rxn = AllChem.ReactionFromSmarts('[C:1](=[O:2])Cl.[N:3]>>[C:1](=[O:2])[N:3]')\n","\n","# Acid chlorides: acetic chloride and benzoyl chloride\n","acid_chlorides = [Chem.MolFromSmiles(s) for s in [\"CC(=O)Cl\", \"O=C(Cl)c1ccccc1\"]]\n","\n","# Amines: ethylamine and aniline\n","amines = [Chem.MolFromSmiles(s) for s in [\"NCC\", \"Nc1ccccc1\"]]\n","\n","# Run reactions\n","for acid in acid_chlorides:\n","    for amine in amines:\n","        prods = rxn.RunReactants((acid, amine))\n","        for prod_set in prods:\n","            prod_smiles = Chem.MolToSmiles(prod_set[0])\n","            print(f\"{Chem.MolToSmiles(acid)} + {Chem.MolToSmiles(amine)} -> {prod_smiles}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lSI7IVKBzFLn","executionInfo":{"status":"ok","timestamp":1757225465596,"user_tz":420,"elapsed":6,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"b932a3d8-acac-4a94-f88d-9819d9062544"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["CC(=O)Cl + CCN -> CCNC(C)=O\n","CC(=O)Cl + Nc1ccccc1 -> CC(=O)Nc1ccccc1\n","O=C(Cl)c1ccccc1 + CCN -> CCNC(=O)c1ccccc1\n","O=C(Cl)c1ccccc1 + Nc1ccccc1 -> O=C(Nc1ccccc1)c1ccccc1\n"]}]},{"cell_type":"markdown","source":["For publication-quality drawings or specific styling, RDKit can use the MolDraw2D classes to draw to SVG (vector graphics) which can be nice for including in reports as they scale without losing quality. For quick tasks, PNG via MolToImage suffices. Below is an example:"],"metadata":{"id":"54ya9XNgzRov"}},{"cell_type":"code","source":["from rdkit import Chem\n","from rdkit.Chem import Draw\n","from IPython.display import Image, display\n","\n","# Single molecule: pyridine\n","mol = Chem.MolFromSmiles(\"c1ccncc1\")\n","img = Draw.MolToImage(mol, size=(150, 150))\n","img.save(\"pyridine.png\")  # Save to file\n","display(Image(filename=\"pyridine.png\"))  # Show inline\n","\n","# Multiple molecules in a grid\n","smiles_list = [\"CCO\", \"c1ccccc1\", \"CCN(CC)CC\", \"C1=CC=CC=C1C(O)=O\"]  # ethanol, benzene, triethylamine, benzoic acid\n","mols = [Chem.MolFromSmiles(s) for s in smiles_list]\n","\n","img2 = Draw.MolsToGridImage(\n","    mols,\n","    molsPerRow=2,\n","    subImgSize=(150, 150),\n","    legends=[\"Ethanol\", \"Benzene\", \"Triethylamine\", \"Benzoic acid\"]\n",")\n","img2.save(\"grid.png\")\n","display(Image(filename=\"grid.png\"))  # Show inline\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"id":"Eofxe3P-zLZ4","executionInfo":{"status":"ok","timestamp":1757225574662,"user_tz":420,"elapsed":78,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"fb75f5e7-70e4-4430-f181-3f040241a05f"},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAIAAACzY+a1AAAPf0lEQVR4nO2dfXBM9xrHv/sWbUpsgiRUtERYUjRNdSYl7Wivq0bGW+7EyGDERMugyUVlblySuDQ0VC43DIapt4sRkinTaoupBjOtJBIJ1QipjdRG2g2pbLLs7nP/OO7eF3v27bztifP50z7neZ74nj3n7O/8ft+fioigIGfUUjegwBVFQtmjSCh7FAlljyKh7FEklD2KhLJHkVD2KBLKHkVC2aNIKHsUCWWPIqHsUSSUPYqEskeRUPYoEsoerdQNPKG+vj4/P7+pqQlAZGTkkCFDpO7IW2pqalpbWwFER0fn5OSEh4eL3IAqQCZe9O3b12QySd0FV2JjY2tra0UuGhDfwpKSEpPJpFKp4uPjtVptv379hg4dKnVT3lJdXW02mzs7O6uqqq5evbp///7Zs2eL2gFJjdVqjYmJAVBYWCh1L5wYPXo0AL1e73A4xKwrvYT5+fkAhg8f/ujRI6l74cSdO3deeOEFAIcOHRKzrsQSmkymkJAQAKdOnZK2E17YtWsXgP79+z98+FC0ohJLOHfuXABTp06Vtg2+sNvtzOU0NzdXtKJSSlhRUaFWq4OCgurq6iRsg18uXLigUqmef/75n3/+WZyKkknocDgSExMBZGVlSdWDQMyYMQPAzJkzxSknmYQHDhwAEBERcf/+fal6EIjGxkbmuebcuXMilJPmp31HR4fBYDAajXv27ElLS2OLiY2NFbkx7wkLCysvL2f7NDc3Ny8vLy4urry8XK0WeBRThNPkaVatWgXgtddes9vtbDEPHz4U9i/nRq9evdz8gRaL5aWXXgKwe/duAf7//gcJvoWNjY0Gg6Gjo+PcuXPM7dAlRNTQ0CBmYz6h0WgYkdg4dOhQampqeHh4XV1dz549BWxF6HPkaVJSUgCkpqaKX1pMnM9rK1asELSQ2BKeP39e5GduCamsrGR+Nf3000/CVRFVQrvd/vrrrwPIy8sTs66EzJs3D8DkyZOFKyGqhDt37gQQFRXV3t4uZl0JaW5uZm6Ewo0giidhW1tbZGQkgCNHjohWNBDYsGEDgGHDhgk0ji+ehMuWLQPw5ptvivwuRnKsViszCWHLli1C5BdJwhs3bnTr1k2tVl+6dEmcigFFaWkpgNDQ0JaWFt6TiyThpEmTAMyfP1+ccgHIhAkTACxatIj3zGJI+M033wDo0aPH3bt3RSgXmFy7dk2n02k0murqan4zCy7h48ePX3nlFQAbN24UulaAs2TJEgDvvPMOv2kFl7CoqC0x8QODwWC1WoWuFeCYzebevXsDKCkp4TGtsBK2tFBoKAF08mSHoIXkwtatWwEMGjSoo4O3/xBhJVywgAD6wx8ELSInbDbbiBEjAOTn5/OVU0AJa2tJqyWtlmpqhCsiP86cOQOge/fuTU1NvCQUUMLx4wmgjAzhKsiVqVOnApg7dy4v2YSSsLiYAAoLo19/FaiCjLl58yYz0PH9999zzyaIhJ2dNHgwAbRtmxDpuwJZWVkAEhISuA83CiLh2rUEUGwsPX4sRPquQFtbW9++fQEcOHCAYyr+Jbx7l0JCCKCvv+Y9d5diz549AF588UWOU7/5l3D2bAIoOZn3xF0Nu93+xhtvAFi1ahWXPDxLWF5OajUFBdGNG/wm7ppcvHiRmYbS0NDgdxI+JXQ4aMwYAig7m8esXZzU1FQAKSkpfmfgU8K9ewmgiAh68IDHrF0c55K2b7/91r8MvEn4++/Urx8BtHcvXymfFfLy8gC8+uqrNpvNj8N5kzA7mwCKjyf2+dkKrrFYLC+//DKAHTt2+HE4PxLeukXPPUcqFZWV8ZLvmePIkSMA+vTp09ra6uux/EiYnEwAzZ7NS7JnlLfffhvAsmXLfD2QBwnPniWAgoPp9m3uyZ5dLl++rNFodDrd9evXfTqQq4Q2G40aRQCtXcsxkwLNnz8fwKRJk3w6iquE27YRQAMG0DMzP1tAmpub9Xo9gC+++ML7ozhJ2NpKvXsTQMXFXNIo/IeNGzcCMBgM3k/95iRhZiYBNHYsPWPzswXk0aNHjPPV5s2bvTyE0xri9nbodPjHP6BScUmj8B90Oh3zRczLy2tpafHqGI5njdHIMYGCCyZOnAhgwYIF3gS7Xqjd0YHOTgAIDka3bi6Et9vR1gYAPXpAGxBWfF2K69evjxw50uFwVFRUjBo1yn2w6wvphg0IC0NYGCZPdn3YzZtPAs6d49itggsMBsOiRYvsdvvixYtdfsf+Gw/3wq+/xpEj/LWm4DU5OTm9e/c+f/788ePH3Ud6fpzJzMT9+/y0peA9er1+zZo1AJYuXWqxWNxEupMwKgpRUTCZ8Ne/8tyfgje8//77o0aNMhqNmzdvdhPmTsLnnsOaNQCwfTsuXeK3PQXPaDQaRryPP/7YaDSyhXm4kM6Zg9Gj4XAgPR02G88tKnhk3LhxycnJFotl+fLlbDEeJFSr8fe/Q6XClSsoKuK7QQUvKCgo0Gq1R48e3bFjh8sAz48zCQlITQWAVavQ1MRvewqeGThwIDNXcenSpTZXV0KvBtg2bYJej99/R2Ymv+0pPKGsrMyNbeDx48fVarXFYtm0adPTn3olYUQE8vIAoLgYX37pb5sKLJhMpqSkpKFDh967d8+Pw70d5l60CHFxAPDhh7Ba/SikwEp2dnZbW9vo0aPZdpqZNm2aw+Ho3r37Rx999PSn3kqo0WDHDqjVqK9Xnmv45PLly3v37g0KCvrkk09cBjQ0NFy6dAlAYWGha3dal4PfOTkEUEzM//97ejoBpNfTxYsEEECnT3Makn/G8cbwcvr06XA73ds3CVtaqFcvAmjiREVCHjh48CCA8PBwNoPys2fPwtOqbt8kJKKdO5+I515Cu12ZE+wBj+bPNptt5MiRANatW+cmj88S2u2UkOBBwgsXKC6OhHelljerV68GEBcXx2ZQXlRUBGDgwIHuHU58lpCIrlwhrdadhP/8JwEUHk5dbv8C3mhsbAwODlapVN99953LAKfP0LFjx9yn8kdCIlqyxMOFNDGRABLYlVrGeNyOJCMjA8C4ceM8pnItocVCZrO779Djx2Q2k9nMupq+svLJWlEhXanlisdNgZyee1VVVR6zCTj9ad48AkhIV2pZ4jQod7M113vvvQdg4cKF3iTkJOH8+aTTEduJ0txMPXsSQF9+yaVIV4MxKHezQd7nn38OX/xnOUn45z8TQGPGsE4F3rCBABo2jGS+uyRvOA3KDx8+7DLA6QLt/Z6qnCR88IAiIgigo0ddB1itNGQIASSMK7X88GhQXlBQADEn5BPR9u0EUFQU67KY0lICKDSUBHCllhn19fXuDcqdOyKItyyGiOx2io8ngP72N9aYCRMIIAFcqWVGUlISgPT0dLaA9PR0AElJST6l5WGJaFkZqVTuloheu0Y6HWk0dOUK92pyxWlQ/ssvv7gMqKys1Gg0QUFBYi8RZfjTnwigWbNYAxYvJoD4dqWWDU6D8oKCAraYt956C8Dy5ct9Tc6PhEYjBQe7s0swm5+sROTVlVo2FBYWAoiOju7s7HQZcPjwYfevLNzAm2nJypUeTEu2biWABg0i/lyp5cFvv/3Wq1cvACdOnHAZ4DQt2blzpx/5eZOwvZ0GDCCAPvvMdYDNRiNGEED8uVLLg4ULFwJ499132QJyc3MRCNZBRLRvnwcDrzNnCKDu3Ynljt4Fqa2t1Wq1Wq22hsWh3Ll3s/QGXkTkcNDYsQTQX/7CGjNlCgGUlsZj2YBm/PjxADLYHcpnzpwJYMaMGX6XEMrMsq7OdcDNm9StG6nVxIcrdaBTXFwMICws7FcWh/KAM7NkmDOHAJo+nTUgK4sASkjo4iYLVqt18ODBALaxOJQ7LWVXr17NpRD/EppMT4ydv/rKdUBbG0VGklZLxcVd2S5q3bp1AIYPH/6Y5Z3q7t27EZjGzkS0bh0BNHw46wvhgwd/HTx4qpsXLnLHZDKFhIQA+IrlRHbaqx88eJBjLUEktFopJoYAKipyHcDXNSRgmTNnDoDp7LeTFStWIJA3OSCiY8c8bDXCy508MCkvL2f2Qq9jeaiTwVYjDH/8IwH04YesAdxtqQMQh8MxZswYANnsDuVTpkwBkMbTTysBJbx61cO2W9xtqQOQffv2AYiIiHjAMsDBbLvl5pWFrwi7+d3ChQQQ+9ASV1vqQKO9vX3AgAEAPmMZZnRufrd+/Xq+ioq2BaXrLUQ5jvAGGitXrgQQHx/PNkF7y5YtAAYNGsT2ysIPRNgItiMx8YDBEMu2EazzPYsfttQBxe3bt5kJ2mUsr9zMZjPzyqK0tJTHuuJtx+zmbaffttQBRXJyMoDZ7A7lixcvhhy3Yyai06dPu7+B+21LHTiUlZWpVKrg4ODbLNNPrl69ykzQvsL39BMxJCTBZv4ECDabjfErXMvuUD5hwgQAjC0ev4gkoXP+3Q8//OAywL/5dwHC9u3bAURFRbWzTMUsKSnxaYK2T4gkIREx/kX8zoINBFpbW/v06QPgKMuEaKvVGhMTA2Dr1q1CNCCehM6BXTdz0X21pQ4EMjMzAYwdO5bt1Fy/fj3zykKgU1M8CYlo165d7leEnDhxAoBer793756YjfnNjz/+qNPp1Gp1eXm5ywCTycTcIE6dOiVQD6JK6M26LJ9sqSWH6faDDz5gC0hLSwMwZcoU4XoQVULyYnUkc157uTpSWk6ePAkgJCTk7t27LgMqKiqYVxY/CblQVmwJidc1yhLi3FDi008/dRng9JTJysoStBMJJHROu/PoFFAcwLvQeNzWhfGUiYiI8GOCtk9w2mrEP/r3788ss8vIyHA4HE8HhIaGrlmzRqfT3bp1S/TuvMVoNKrV6k2bNul0uqc/7ejoyM7OBpCfn888zgiIoCcIG9645twI+E253QwHevSU4RFpJCQvvKvki9FodO8pwy+SSeiNg5xMSUlJAZCamipOOckkJKLKykoRnrlFxuOvJt6RUkIS5ZevmDjHLvLy8kQrKrGEIow/iYlHTxkhkFhC+vco8LBhw+T1guJp7ty5ExwcDPZxfIGQXkKnWY68XlA8DXMJ1ev13Cdo+4Tr/QtFprS0dNq0aSqVKj4+XqvV9uvXjxm7kgXV1dVms7mzs7OqqgrA/v37Z82aJWYDASEhgMjIyObmZqm74EpsbGxtba3IRQNFwvr6+vz8/KamJgCRkZHMpVUW1NTUtLa2AoiOjs7JyWHbqEA4AkVCBb+RYJhbgV8UCWWPIqHsUSSUPYqEskeRUPYoEsoeRULZo0goexQJZY8ioexRJJQ9ioSyR5FQ9igSyh5FQtmjSCh7/gWIy3y4dEJF+AAAAABJRU5ErkJggg==\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{}}]},{"cell_type":"markdown","source":["While 2D diagrams are great for structure formulas, 3D visualization shows you the actual shape and conformation of molecules, which is important for understanding things like steric interactions, binding to proteins, etc. RDKit can compute 3D coordinates as we mentioned (embedding + force field). But RDKit itself doesn’t have a 3D viewer. It can produce coordinates and maybe write\n","\n","them out to files (like MOL2 or PDB format) which you could open in external viewers (PyMOL, Chimera, VMD, etc.). However, within a Python notebook, a popular way to visualize 3D is using the py3Dmol library, which brings the capabilities of the 3Dmol.js (a WebGL viewer) to Python:"],"metadata":{"id":"NMejCYOEz0we"}},{"cell_type":"code","source":["from rdkit import Chem\n","from rdkit.Chem import AllChem\n","import py3Dmol\n","\n","# Example molecule: 2,3-butanediol\n","mol = Chem.MolFromSmiles(\"CC(O)C(O)C\")\n","\n","# Generate 3D coordinates\n","AllChem.EmbedMolecule(mol)\n","AllChem.MMFFOptimizeMolecule(mol)\n","\n","# Convert to MOL block with 3D coordinates\n","mb = Chem.MolToMolBlock(mol)\n","\n","# Create 3D viewer\n","view = py3Dmol.view(width=300, height=300)\n","view.addModel(mb, \"mol\")   # add model in MOL format\n","view.setStyle({\"stick\": {}})  # render as sticks\n","view.zoomTo()              # fit view\n","view.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":317},"id":"2n9eeqqbzU57","executionInfo":{"status":"ok","timestamp":1757225644524,"user_tz":420,"elapsed":95,"user":{"displayName":"Violet Guo","userId":"14521215079465494915"}},"outputId":"975a4856-cb4a-49e4-bb07-26f69d48ffd1"},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"application/3dmoljs_load.v0":"<div id=\"3dmolviewer_1757225644470342\"  style=\"position: relative; width: 300px; height: 300px;\">\n        <p id=\"3dmolwarning_1757225644470342\" style=\"background-color:#ffcccc;color:black\">3Dmol.js failed to load for some reason.  Please check your browser console for error messages.<br></p>\n        </div>\n<script>\n\nvar loadScriptAsync = function(uri){\n  return new Promise((resolve, reject) => {\n    //this is to ignore the existence of requirejs amd\n    var savedexports, savedmodule;\n    if (typeof exports !== 'undefined') savedexports = exports;\n    else exports = {}\n    if (typeof module !== 'undefined') savedmodule = module;\n    else module = {}\n\n    var tag = document.createElement('script');\n    tag.src = uri;\n    tag.async = true;\n    tag.onload = () => {\n        exports = savedexports;\n        module = savedmodule;\n        resolve();\n    };\n  var firstScriptTag = document.getElementsByTagName('script')[0];\n  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n});\n};\n\nif(typeof $3Dmolpromise === 'undefined') {\n$3Dmolpromise = null;\n  $3Dmolpromise = loadScriptAsync('https://cdn.jsdelivr.net/npm/3dmol@2.5.2/build/3Dmol-min.js');\n}\n\nvar viewer_1757225644470342 = null;\nvar warn = document.getElementById(\"3dmolwarning_1757225644470342\");\nif(warn) {\n    warn.parentNode.removeChild(warn);\n}\n$3Dmolpromise.then(function() {\nviewer_1757225644470342 = $3Dmol.createViewer(document.getElementById(\"3dmolviewer_1757225644470342\"),{backgroundColor:\"white\"});\nviewer_1757225644470342.zoomTo();\n\tviewer_1757225644470342.addModel(\"\\n     RDKit          3D\\n\\n  6  5  0  0  0  0  0  0  0  0999 V2000\\n    1.7585   -0.2803   -0.8025 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    0.7136   -0.3624    0.2838 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    0.8912    0.7397    1.1589 O   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.6908   -0.4012   -0.2879 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.9341    0.6976   -1.1512 O   0  0  0  0  0  0  0  0  0  0  0  0\\n   -1.7384   -0.3934    0.7988 C   0  0  0  0  0  0  0  0  0  0  0  0\\n  1  2  1  0\\n  2  3  1  0\\n  2  4  1  0\\n  4  5  1  0\\n  4  6  1  0\\nM  END\\n\",\"mol\");\n\tviewer_1757225644470342.setStyle({\"stick\": {}});\n\tviewer_1757225644470342.zoomTo();\nviewer_1757225644470342.render();\n});\n</script>","text/html":["<div id=\"3dmolviewer_1757225644470342\"  style=\"position: relative; width: 300px; height: 300px;\">\n","        <p id=\"3dmolwarning_1757225644470342\" style=\"background-color:#ffcccc;color:black\">3Dmol.js failed to load for some reason.  Please check your browser console for error messages.<br></p>\n","        </div>\n","<script>\n","\n","var loadScriptAsync = function(uri){\n","  return new Promise((resolve, reject) => {\n","    //this is to ignore the existence of requirejs amd\n","    var savedexports, savedmodule;\n","    if (typeof exports !== 'undefined') savedexports = exports;\n","    else exports = {}\n","    if (typeof module !== 'undefined') savedmodule = module;\n","    else module = {}\n","\n","    var tag = document.createElement('script');\n","    tag.src = uri;\n","    tag.async = true;\n","    tag.onload = () => {\n","        exports = savedexports;\n","        module = savedmodule;\n","        resolve();\n","    };\n","  var firstScriptTag = document.getElementsByTagName('script')[0];\n","  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n","});\n","};\n","\n","if(typeof $3Dmolpromise === 'undefined') {\n","$3Dmolpromise = null;\n","  $3Dmolpromise = loadScriptAsync('https://cdn.jsdelivr.net/npm/3dmol@2.5.2/build/3Dmol-min.js');\n","}\n","\n","var viewer_1757225644470342 = null;\n","var warn = document.getElementById(\"3dmolwarning_1757225644470342\");\n","if(warn) {\n","    warn.parentNode.removeChild(warn);\n","}\n","$3Dmolpromise.then(function() {\n","viewer_1757225644470342 = $3Dmol.createViewer(document.getElementById(\"3dmolviewer_1757225644470342\"),{backgroundColor:\"white\"});\n","viewer_1757225644470342.zoomTo();\n","\tviewer_1757225644470342.addModel(\"\\n     RDKit          3D\\n\\n  6  5  0  0  0  0  0  0  0  0999 V2000\\n    1.7585   -0.2803   -0.8025 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    0.7136   -0.3624    0.2838 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    0.8912    0.7397    1.1589 O   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.6908   -0.4012   -0.2879 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.9341    0.6976   -1.1512 O   0  0  0  0  0  0  0  0  0  0  0  0\\n   -1.7384   -0.3934    0.7988 C   0  0  0  0  0  0  0  0  0  0  0  0\\n  1  2  1  0\\n  2  3  1  0\\n  2  4  1  0\\n  4  5  1  0\\n  4  6  1  0\\nM  END\\n\",\"mol\");\n","\tviewer_1757225644470342.setStyle({\"stick\": {}});\n","\tviewer_1757225644470342.zoomTo();\n","viewer_1757225644470342.render();\n","});\n","</script>"]},"metadata":{}}]}]}